name: Publish

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]

  pull_request:
    branches: [ main ]

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-docker-images:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.3.1

      - name: Extract metadata (tags, labels) for Docker
        id: docker_metadata
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,enable=${{ !endsWith(github.ref, github.event.repository.default_branch) }},value=${{ env.CI_ACTION_REF_NAME_SLUG }}
            type=raw,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }},value=nightly
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.vendor=OKP4

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_REGISTRY_ID }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: okp4
          password: ${{ secrets.DOCKER_HUB_REGISTRY_TOKEN }}

      - name: Build and publish image(s)
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_metadata.outputs.tags }}
          labels: ${{ steps.docker_metadata.outputs.labels }}

  publish-npm-package-okp4:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.3.1

      - name: Setup node environment (for publishing)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0
          registry-url: "https://npm.pkg.github.com"
          scope: "@okp4"

      - name: Publish package
        run: |
          DATE=$(date +%Y%m%d%H%M%S)
          yarn && yarn build
          publish=(yarn publish --no-git-tag-version --non-interactive)
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            publish+=(--tag latest)
          elif [[ $GITHUB_EVENT_NAME == pull_request ]]; then
            publish+=(--prerelease --preid ${{ env.CI_ACTION_REF_NAME_SLUG }}.$DATE --tag ${{ env.CI_ACTION_REF_NAME_SLUG }})
          else
            publish+=(--prerelease --preid next.$DATE --tag next)
          fi
          echo "ðŸš€ Publishing npm package with following command line: ${publish[@]}"
          "${publish[@]}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}

  publish-npm-package-public:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.3.1

      - name: Setup node environment (for publishing)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0
          registry-url: "https://registry.npmjs.org"
          scope: "@okp4"

      - name: Publish package
        run: |
          yarn && yarn build
          publish=(yarn publish --access=public --no-git-tag-version --non-interactive)
          publish+=(--tag latest)
          echo "ðŸš€ Publishing npm package with following command line: ${publish[@]}"
          "${publish[@]}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLIC_REGISTRY_TOKEN }}

  publish-storybook:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    if: github.event_name != 'pull_request'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup node environment (for publishing)
        uses: actions/setup-node@v2
        with:
          node-version: 16.14.0
          registry-url: "https://npm.pkg.github.com"
          scope: "@okp4"

      - name: Build storybook
        run: |
          yarn
          yarn build-storybook
      - name: Deploy storybook
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages
          folder: dist
          clean: true
          token: ${{ secrets.OKP4_TOKEN }}
          git-config-name: ${{ secrets.OKP4_BOT_GIT_AUTHOR_NAME }}
          git-config-email: ${{ secrets.OKP4_BOT_GIT_COMMITTER_EMAIL }}
          commit-message: |
            feat: update storybook site (auto)

  publish-pypi:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.3.1

      - uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.1.11

      - name: Publish package
        working-directory: ${{env.WORK_DIR}}
        run: |
          poetry install
          poetry build
          echo "ðŸš€ Publishing pypi package"
          poetry publish  -u __token__ -p "${{ secrets.PYPI_API_TOKEN }}"
